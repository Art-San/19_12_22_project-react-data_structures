/* eslint-disable react/no-unescaped-entities */
import React from 'react'
import Title from 'app/components/common/typografy/title'
import Text from 'app/components/common/typografy/text'
import diagrama1 from 'app/assets/img/diagrams/slaid-1.png'
import diagrama2 from 'app/assets/img/diagrams/slaid-2.png'
import diagrama3 from 'app/assets/img/diagrams/slaid-3.png'
import diagrama4 from 'app/assets/img/diagrams/slaid-4.png'
import SmallTitle from 'app/components/common/typografy/smallTitle'
import { CodeBlock, dracula } from 'react-code-blocks'
import { manufacturers, storage, someProduct } from './examples'

const OneToOnePage1 = () => {
    return (
        <>
            <Title>Тип связи один к одному</Title>
            <Text>
                В этой части мы рассмотрим, как работает и реализовывается
                связь “один к одному”. Но сперва поговорим о том, что такое связи.
            </Text>
            <Text>
                Представим, что мы проектируем базу данных.
                В этой базе данных есть таблица, которая называется “Товары”,
                в ней хранится информация о каждом товаре, например, название,
                производитель и цена. Существует также информация,
                которую мы можем хранить о производителе, например, название, логотип,
                описание и т. д. Если мы храним всю информацию в таблице “Товары”,
                то данные о производителе, в сущности, товара, могут дублироваться
                (например, если у двух товаров одинаковый производитель).
            </Text>
            <Text>
                Связь работает путем сопоставления данных в ключевых столбцах.
                В большинстве случаев связь соединяет ID для каждой строки,
                от одной таблицы к полю в другой таблице.
            </Text>
            <img
                src={diagrama1}
                style={{
                    width: '100%',
                    borderRadius: '10px'
                }}
            />
            <Text>
                PK (primary key или первичный ключ) — поле,
                которое является идентификатором для каждой
                отдельной записи в таблице базы данных.
            </Text>
            <Text>
                Колонка в другой таблице называется внешний
                ключ (foreign key или FK).
            </Text>
            <Text>
               Например, если мы хотим отслеживать продажи каждого товара,
               то создадим связь между основным ключевым столбцом (назовем его id)
               в таблице “Товары” и столбцом в таблице “Продажи”,
               который называется product_ID.
               Столбец product_ID в таблице Продажи является внешним ключом.
            </Text>
            <Text>
                Существует три вида связей между таблицами.
                Тип создаваемых связей зависит от того,
                как определяются связанные столбцы.
                В этой части мы разберём тип связи “один к одному”.
            </Text>
            <Text>
                Пример, описаный выше, является примером связи “один к одному”.
                У товара не может быть несколько производителей, можно создать
                только одну связь между товаром и производителем
                (рассматриваем относительно товара).
            </Text>
            <SmallTitle>
                Зачем нужна связь "один к одному"
            </SmallTitle>
            <li>Для разделения сущности на более используемые и менее используемые данные</li>
            <li>Для оптимизации чтения и обработки данных</li>
            <li>Для оптимизации объема памяти, необходимого для работы приложения</li>
            <Text>Рассмотрим, как бы выглядела схема нашей базы данных:</Text>
            <img
                src={diagrama2}
                style={{
                    width: '100%',
                    borderRadius: '10px'
                }}
            />
            <Text>
                У нас есть таблица Products (товары),
                в которой есть поле manufacturer_id
                (равное id в таблице Manufacturer),
                которое ссылается на таблицу Manufacturer
                (производители). Так как мы работаем в JS,
                для наглядности рассмотрим представление этой
                БД в JSON:
            </Text>
            <CodeBlock
                text={manufacturers}
                language="js"
                theme={dracula}
                wrapLines={true}
            />
            <Text>
                Если бы мы хотели денормализовать эти данные,
                то нам это не составило бы труда:
            </Text>
            <CodeBlock
                text={storage}
                language="js"
                theme={dracula}
                wrapLines={true}
            />
            <Text>
                В данном случаем в итоге мы получим следующий
                массив с товарами:
            </Text>
            <CodeBlock
                text={someProduct}
                language="js"
                theme={dracula}
                wrapLines={true}
            />
            <Text>
                В реальном проекте у нас могут быть сотни товаров
                и только десятки производителей. В таком случае
                связь один к одному помогает экономить память
                для хранения данных и экономить трафик
                при передачи данных по сети.
            </Text>
            <Text>
                Кроме того, не каждый раз нам может понадобиться производитель
                для каких-то операций с данными товара. Тогда нам не нужно
                получать производителя каждый раз, когда производим операции
                с товаром. Так же и в обратную сторону. Нам не нужна сущность
                “товар”, когда мы работаем с данными о производителе.
            </Text>
            <Text>
                Ещё мы можем использовать связь один к одному
                при проектировании БД (или хранилища) для разделения на сущности,
                которые меняются чаще или реже.
                Например можно разделить данные о товаре и его цене.
                В реальности прайс меняется чаще, чем остальные данные о товаре:
            </Text>
            <img
                src={diagrama3}
                style={{
                    width: '100%',
                    borderRadius: '10px'
                }}
            />
            <Text>
                Или, например, если бы у нашего товара были отзывы.
                Очевидно, что отзывы меняются чаще, чем описание о товаре:
            </Text>
            <img
                src={diagrama4}
                style={{
                    width: '100%',
                    borderRadius: '10px'
                }}
            />
            <Text>
                Но данный пример с отзывами иллюстрирует другой тип связи
                “один ко многим”. В следующей части мы его и разберём.
            </Text>
        </>
    )
}

export default OneToOnePage1
