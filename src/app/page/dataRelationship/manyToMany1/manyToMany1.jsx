import React from 'react'
import Title from 'app/components/common/typografy/title'
import SmallTitle from 'app/components/common/typografy/smallTitle'
import Subtitle from 'app/components/common/typografy/subtitle'
import Text from 'app/components/common/typografy/text'
import diagrama1 from 'app/assets/img/diagrams/slaid3-1.png'
import diagrama2 from 'app/assets/img/diagrams/slaid3-2.png'
import { CodeBlock, dracula } from 'react-code-blocks'
import { properties, getPropductsWithProps, result } from './examples'
const ManyToManyPage1 = () => {
    return (
        <>
            <Title>Many-to-Many</Title>
            <Text>
                Пожалуй, для понимания этот тип связи самый сложный.
                Давай сразу будем рассматривать на примере.
            </Text>
            <Text>
                У нас есть сущность “Товар”, и мы решили организовать фильтр.
                У товара появляются название свойства и значения. У нас появилась сущность
                “Свойства товара”. При этом у нескольких товаров могут быть одинаковые свойства.
                Мы уже не можем просто взять и записать связь одного к другому в таблице
                с товарами или в таблице с характеристиками. Что же делать?!
            </Text>
            <Text>
                Чтобы создать связь между записями этих таблиц, нужно использовать промежуточную таблицу:
            </Text>
            <img
                src={diagrama1}
                style={{
                    width: '100%',
                    borderRadius: '10px'
                }}
            />
            <Text>
                Мы создали промежуточную таблицу со
                свойствами продуктов, которая связана
                по product_id с товаром и по property_id.
                Представим в виде JSON:
            </Text>
            <CodeBlock
                text={properties}
                language="js"
                theme={dracula}
                wrapLines={true}
            />
            <Text>
                В данном примере есть два товара и два доступных свойства товара.
                У обоих товаров есть оба свойства. Для получения денормализованного
                значения можно воспользоваться функцией:
            </Text>
            <CodeBlock
                text={getPropductsWithProps}
                language="js"
                theme={dracula}
                wrapLines={true}
            />
            <Text>В результате мы получим:</Text>
            <CodeBlock
                text={result}
                language="js"
                theme={dracula}
                wrapLines={true}
            />
            <Text>
                На этом примере мы увидели, как можно организовать
                связь “многие ко многим”. Также мы увидели, что это
                помогает нам не копировать одни и те же данные
                множество раз.
            </Text>
            <Subtitle>Зачем нужен тип связи “многие ко многим”</Subtitle>
            <li>Увеличение производительности</li>
            <li>Организация между несколькими записями одной сущности и несколькими записями другой сущности</li>
            <li>Обеспечение согласованности данных</li>
            <Text>
                Также часто прослеживается (во фронтенде) то, что такой
                тип связи используется для данных, которые нужны
                для фильтрации каких-то сущностей. Для фильтрации
                нам нужно знать не только, что у товара есть какая-то
                характеристика, но и её значение. Давай расширим наш пример:
            </Text>
            <img
                src={diagrama2}
                style={{
                    width: '100%',
                    borderRadius: '10px'
                }}
            />
            <Text>
                В этом случае у нас появляется связь “один ко многим”
                между Properties (характеристиками) и PropertyValues
                (возможными значениями характеристик),
                а также связь “многие ко многим” у Products (товаров)
                и PropertyValues (значениями характеристик) через
                промежуточную таблицу ProductProperties.
                При этом мы можем отдельно запрашивать названия
                и значения характеристик без обращения к товарам
                или к промежуточной таблице ProductProperties.
            </Text>
            <SmallTitle>Заключение</SmallTitle>
            <Text>
               В данном конспекте мы рассмотрели,
               что такое нормализация и денормализация,
               рассмотрели типы связей.
            </Text>
            <Text>
                Мы поняли, что нет одного лучшего или худшего
                способа организация хранилища. Нужно использовать
                тот способ и те методы, которые нужны для реализации ваших задач.
            </Text>
            <Text>
                Работа со структурами данных довольно сложная тема,
                и особенно она сложна в отрыве от примеров.
                Мы попытались рассмотреть данную тему с помощью примера
                с товарами и написали несколько функций для денормализации.
                Больше примеров будет, когда мы станем работать
                со своим хранилищем данных в приложении.
            </Text>

        </>
    )
}

export default ManyToManyPage1
